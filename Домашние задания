Задание №2. Условные конструкции
Дано целое число. Определите и выведите его строку-описание вида:
– "нулевое число";
– "положительное четное число";
– "положительное нечетное число";
– "отрицательное четное число";
– "отрицательное нечетное число".

var a= -5; //целое число
if (a==0){
	console.log ("нулевое число");
	} else if (0 < a  && a % 2 == 0){
	console.log ("положительное четное число");
	}else if (0 < a  && a % 2 !==0){
	console.log ("положительное нечетное число");	
	}else if (0 > a && a % 2 == 0){
    console.log ("отрицательное четное число");
	}else if (0 > a && a % 2 !== 0){
	 console.log ("отрицательное нечетное число");
	}
</script>

Задание №3. Условные конструкции
Даны четыре целых числа, одно из которых отлично от трех других, равных между собой. Определите порядковый номер числа, отличного от остальных.

<script>
var a = 3; 
var b = c = d=10; 

if (b==c &&c==d){
	console.log ("порядковый номер - 1") ;
} else if (a==c&&c==d){
	console.log ("порядковый номер - 2") ;
}else if (a==b&&b==d){
	console.log ("порядковый номер - 3") ;
}else if (a==b&&b==c){
	console.log ("порядковый номер - 4");
}
</script>





Задание №4. Условные конструкции
Дано целое число k. Выведите строку-описание оценки, соответствующей числу k (1 – "плохо", 2 – "неудовлетворительно", 3 – "удовлетворительно", 4 – "хорошо", 5 – "отлично"). Если k не лежит в диапазоне 1–5, то вывести строку "ошибка".

<script>
var k = 9; 

switch (k) {
	case 1: //(k==1)
	console.log ("1 - плохо") ;
	break;
	case 2: //(k==2)
	console.log ("2 – неудовлетворительно") ;
	break;
	case 3: //(k==3)
	console.log ("3 – удовлетворительно") ;
    break;
	case 4: //(k==4)
	console.log ("4 – хорошо");
	break;
	case 5: //(k==5)
	console.log ("5 – отлично") ;
	break;
	default:
 console.log ("ошибка");
 break;
}
</script>

Задание №5. Циклы (while)
Даны положительные числа a и b (a > b). На отрезке длины a размещено максимально возможное количество отрезков длины b (без наложений). Не используя операции умножения и деления, найдите длину незанятой части отрезка a.

НЕ РАБОТАЕТ


<script>
var  a = 10; // ввесли число a 
var b = 3; // ввесли число b 


do {
	var res = a-b;
	console.log (res);
	
 }while (res<=0);

 console.log (a%b);
 
 
</script>

Задание №6. Циклы (while)
Дано целое число n (>0). Используя операции деления нацело и взятия остатка от деления, выведите все его цифры, начиная с самой правой (разряда единиц).



Задание №7. Циклы (for)
Даны два целых числа a и b (a < b). Найдите сумму всех целых чисел от a до b включительно.
МОЙ КОД НЕ РАБОТАЕТ
<script>
var  a = 3; // ввести число "a" 
var b = 10; // ввести число "b "


for (var  a = a; a<=b ; a ++) {
	var a = a + (a +1);
	var res = a + a++;
	
	console.log (res);	
}
РАБОЧИЙ КОД
</script>

<script>
var  a = 3; // ввести число "a" 
var b = 10; // ввести число "b "
var n = 0;
var i = 0;

for (var  i = a; i<=b ; i++) {
	n = i + (n);
	if (i==b){
	document.write (n);
	}
}
</script>

Задание №8. Циклы (for)
Дано целое число n (n > 0). Найдите произведение n! = 1 * 2 * … * n.
<script>
var  n = + prompt ( "put a number"); // ввести число "n" 
var i = 1;
var res = 1;

for (var  i = 1; i<=n ; i++) {
	res = res * i;
}
alert (res);</script>

Задание №9. Циклы
Напишите код, который:
1. Запрашивает по очереди значения при помощи prompt() и сохраняет их в массиве;
2. Заканчивает ввод, как только посетитель введёт пустую строку, не число или нажмёт "Отмена";
3. Выводит сумму всех значений массива.


<script>
var arr   = []; 

while (true) {
var a = + prompt ("введите число", a) ;
	if (a === "" || a === null || isNaN (a)) break;
			arr.push (+a);	
			}
			var sum = 0;
				for (var i=0; i<arr.length; i++ ){
				var sum = arr [i] + arr [i++];
				}
		alert(sum);
</script>




Задание №10. Циклы
Даны целые числа a и b (a < b). Выведите все целые числа от a до b включительно; при этом число a должно выводиться 1 раз, число a + 1 должно выводиться 2 раза и т.д.


Задание №11. Функции
Напишите функцию pow(x, n), которая возвращает x в степени n. Иначе говоря, умножает x на себя n раз и возвращает результат.

var  x = 2; 
var n = 3;
function pow (x, n){
  var res=x;
  for (i=1; i<n; i++){
    res = res*x
  }
  return res;
}

console.log (pow(x, n))

Задание №12. Функции
Напишите функцию minMax(x, y), которая возвращает минимальное из x и y.



Задание №13. Функции
Напишите функцию sign(x) целого типа, возвращающую для вещественного числа X следующие значения:
– -1, если x < 0;
– 0, если x = 0;
– 1, если x > 0.


Задание №14. Функции
Напишите функцию calc(a, b, op), которая выполняет над числами a и b одну из арифметических операций и возвращает ее результат. Вид операции определяется целым числом op: 1 – вычитание, 2 – умножение, 3 – деление, остальные значения – сложение.

function calc (a, b, op) {
var  a = + prompt ("put a number  a") ; 
var b = + prompt ("put a number  b") ;
var op = + prompt ("put a number  op") ;
var res =0;
	
if (op == 1){
	res = a - b;
		} else if (op == 2){
		res = a * b;
			}else if (op == 3){
			res = a / b;
				}else res = a + b;
  alert (res);
}
  calc ();

Задание №15. Функции
Напишите функцию digitN(k, n), которая возвращает n-ю цифру целого положительного числа k (цифры в числе нумеруются справа налево). Если количество цифр в числе k меньше n, то функция возвращает -1.


Задание №1. Функциональные выражения
Есть следующее определение функции:
function add(x, y) {
   return x + y;
}
Перепишете определение функции add() используя синтаксис Function Expression.

<script>
var add = function (x, y) {
   return x + y;
};
alert (add(1, 2))
</script>

Задание №2. Замыкания
Есть следующий код:
function createArrayIterator(array) {
   // Ваш код
}

var arr = [5, 6, 7];
var itr = createArrayIterator(arr);
console.log(itr()); // 5
console.log(itr()); // 6
console.log(itr()); // 7
console.log(itr()); // undefined
Допишите код, чтобы функция createArrayIterator() возвращала функцию-перечислитель для массива, который задается через параметр array.



Задание №3. Замыкания
Напишите код для "безопасного" вычисления периметра и площади прямоугольника.
Сторонами прямоугольника может быть только число (тип данных Number, значения других типов данных нельзя устанавливать), значение которого, строго больше 0.

Задание №4. Рекурсивные функции
Напишите рекурсивную функцию digitSum(k), которая находит сумму цифр целого числа k, не используя циклы.

Задание №5. Переопределение функций
Есть следующий код:
function format(data, type) {
   // Ваш код
}
var originFormat = format;

format("1", "number");
console.log(format()); // 1
console.log(typeof format()); // "number"

originFormat("Hello", "boolean");
console.log(format()); // true
console.log(typeof format()); // "boolean"

originFormat(true, "string");
console.log(format()); // "true"
console.log(typeof format()); // "string"
Допишите код, чтобы функция format(data, type) переопределяла себя в зависимости от параметра type:
•	Если значением параметра type является строка "number", то переопределенная версия функции format() преобразует значение параметра data в число и возвращает результат;
•	Если значением параметра type является строка "string", то переопределенная версия функции format() преобразует значение параметра data в строку и возвращает результат;
•	Если значением параметра type является строка "boolean", то переопределенная версия функции format() преобразует значение параметра data в логическое значение и возвращает результат;
•	При других значениях параметра type функция format() не переопределяет себя.

